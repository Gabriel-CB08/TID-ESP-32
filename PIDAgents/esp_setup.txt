#include "freertos/FreeRTOS.h"
#include "freertos/task.h"
#include "driver/gpio.h"
#include "driver/spi_master.h"
#include "esp_log.h"
#include "nvs_flash.h"
#include "esp_wifi.h"
#include "esp_event.h"
#include "esp_now.h"
#include "mqtt_client.h"

// Define GPIO pins
#define PIN_MISO     GPIO_NUM_19
#define PIN_MOSI     GPIO_NUM_23
#define PIN_SCK      GPIO_NUM_18
#define PIN_MOUSECAM_RESET     GPIO_NUM_14
#define PIN_MOUSECAM_CS        GPIO_NUM_16

#define ADNS3080_PIXELS_X                30
#define ADNS3080_PIXELS_Y                30

#define ADNS3080_PRODUCT_ID            0x00
#define ADNS3080_PRODUCT_ID_VAL        0x17

spi_device_handle_t spi;

// Function prototypes
void mousecam_reset();
int mousecam_init();
void mousecam_write_reg(int reg, int val);
int mousecam_read_reg(int reg);
void setup_custom_wifi();
void setup_espnow();
void add_peer(uint8_t *mac, int channel, bool encrypt);
void setup_mqtt();

void app_main() {
    // Initialize NVS
    esp_err_t ret = nvs_flash_init();
    if (ret == ESP_ERR_NVS_NO_FREE_PAGES || ret == ESP_ERR_NVS_NEW_VERSION_FOUND) {
        ESP_ERROR_CHECK(nvs_flash_erase());
        ret = nvs_flash_init();
    }
    ESP_ERROR_CHECK(ret);

    // Initialize SPI
    spi_bus_config_t buscfg = {
        .miso_io_num = PIN_MISO,
        .mosi_io_num = PIN_MOSI,
        .sclk_io_num = PIN_SCK,
        .quadwp_io_num = -1,
        .quadhd_io_num = -1,
    };
    spi_device_interface_config_t devcfg = {
        .clock_speed_hz = 1*1000*1000,    // Clock out at 1 MHz
        .mode = 3,                        // SPI mode 3
        .spics_io_num = PIN_MOUSECAM_CS,  // CS pin
        .queue_size = 7,                  // We want to be able to queue 7 transactions at a time
    };
    ESP_ERROR_CHECK(spi_bus_initialize(HSPI_HOST, &buscfg, 1));
    ESP_ERROR_CHECK(spi_bus_add_device(HSPI_HOST, &devcfg, &spi));

    // Initialize Mousecam
    if(mousecam_init() == -1) {
        ESP_LOGE("Mousecam", "Initialization failed");
        while(1) { vTaskDelay(1); }
    }

    // Custom WiFi settings
    setup_custom_wifi();

    // Setup ESPNOW
    setup_espnow();

    // MQTT settings
    setup_mqtt();

    while (1) {
        // Main code here
        vTaskDelay(1000 / portTICK_PERIOD_MS);
    }
}

void mousecam_reset() {
    gpio_set_level(PIN_MOUSECAM_RESET, 1);
    ets_delay_us(10); // reset pulse >10us
    gpio_set_level(PIN_MOUSECAM_RESET, 0);
    ets_delay_us(500); // 35ms from reset to functional
}

int mousecam_init() {
    gpio_set_direction(PIN_MOUSECAM_RESET, GPIO_MODE_OUTPUT);
    gpio_set_direction(PIN_MOUSECAM_CS, GPIO_MODE_OUTPUT);

    gpio_set_level(PIN_MOUSECAM_CS, 1);

    mousecam_reset();

    int pid = mousecam_read_reg(ADNS3080_PRODUCT_ID);
    if (pid != ADNS3080_PRODUCT_ID_VAL)
        return -1;

    // turn on sensitive mode
    mousecam_write_reg(ADNS3080_CONFIGURATION_BITS, 0x19);

    return 0;
}

void mousecam_write_reg(int reg, int val) {
    spi_transaction_t t;
    memset(&t, 0, sizeof(t));       // Zero out the transaction
    uint8_t data[2] = {reg | 0x80, val};
    t.length = 16;                  // 8 bits for each byte
    t.tx_buffer = data;             // Data
    gpio_set_level(PIN_MOUSECAM_CS, 0);
    spi_device_transmit(spi, &t);   // Transmit
    gpio_set_level(PIN_MOUSECAM_CS, 1);
    ets_delay_us(50);
}

int mousecam_read_reg(int reg) {
    spi_transaction_t t;
    memset(&t, 0, sizeof(t));       // Zero out the transaction
    uint8_t data[2] = {reg, 0xff};
    uint8_t result;
    t.length = 8;                   // Only sending the register address
    t.tx_buffer = &data[0];
    t.rx_buffer = &result;
    gpio_set_level(PIN_MOUSECAM_CS, 0);
    spi_device_transmit(spi, &t);   // Transmit
    gpio_set_level(PIN_MOUSECAM_CS, 1);
    ets_delay_us(75);
    return result;
}

void setup_custom_wifi() {
    if (esp_wifi_stop() != ESP_OK)
        ESP_LOGE("WiFi", "Error in esp_wifi_stop");
    if (esp_wifi_deinit() != ESP_OK)
        ESP_LOGE("WiFi", "Error in esp_wifi_deinit");

    wifi_init_config_t my_config = WIFI_INIT_CONFIG_DEFAULT();
    my_config.ampdu_tx_enable = 0;

    if (esp_wifi_init(&my_config) != ESP_OK)
        ESP_LOGE("WiFi", "Error in my_config");
    if (esp_wifi_start() != ESP_OK)
        ESP_LOGE("WiFi", "Error starting");
    if (esp_wifi_internal_set_fix_rate(ESP_IF_WIFI_STA, true, 1 /* DATARATE */) != ESP_OK)
        ESP_LOGE("WiFi", "Error fix rate");
}

void setup_espnow() {
    if (esp_now_init() != ESP_OK)
        ESP_LOGE("ESP-NOW", "Error initializing ESP-NOW");
    
    esp_now_register_send_cb([](const uint8_t *mac_addr, esp_now_send_status_t status) {
        ESP_LOGI("ESP-NOW", "Send status: %s", status == ESP_NOW_SEND_SUCCESS ? "Success" : "Fail");
    });
    esp_now_register_recv_cb([](const uint8_t *mac_addr, const uint8_t *data, int data_len) {
        ESP_LOGI("ESP-NOW", "Received data from " MACSTR, MAC2STR(mac_addr));
    });
}

void add_peer(uint8_t *mac, int channel, bool encrypt) {
    esp_now_peer_info_t peerInfo;
    memset(&peerInfo, 0, sizeof(esp_now_peer_info_t));
    memcpy(peerInfo.peer_addr, mac, 6);
    peerInfo.channel = channel;
    peerInfo.encrypt = encrypt;

    if (esp_now_add_peer(&peerInfo) != ESP_OK)
        ESP_LOGE("ESP-NOW", "Failed to add peer");
    else
        ESP_LOGI("ESP-NOW", "Peer added successfully");
}

void setup_mqtt() {
    // MQTT setup code
    // esp_mqtt_client_config_t mqtt_cfg = {
    //     .uri = "mqtt://mqtt_broker_uri",
    // };
    // esp_mqtt_client_handle_t client = esp_mqtt_client_init(&mqtt_cfg);
    // esp_mqtt_client_start(client);
}
