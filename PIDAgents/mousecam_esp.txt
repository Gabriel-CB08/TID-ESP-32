#include "freertos/FreeRTOS.h"
#include "freertos/task.h"
#include "driver/gpio.h"
#include "driver/spi_master.h"
#include "esp_log.h"
#include "nvs_flash.h"

#define PIN_MOUSECAM_RESET GPIO_NUM_X // Reemplaza X con el número de pin correspondiente
#define PIN_MOUSECAM_CS GPIO_NUM_Y    // Reemplaza Y con el número de pin correspondiente

spi_device_handle_t spi;

void mousecam_reset() {
    gpio_set_level(PIN_MOUSECAM_RESET, 1);
    ets_delay_us(10); // reset pulse >10us
    gpio_set_level(PIN_MOUSECAM_RESET, 0);
    ets_delay_us(500); // 35ms from reset to functional
}

int mousecam_init() {
    gpio_set_direction(PIN_MOUSECAM_RESET, GPIO_MODE_OUTPUT);
    gpio_set_direction(PIN_MOUSECAM_CS, GPIO_MODE_OUTPUT);

    gpio_set_level(PIN_MOUSECAM_CS, 1);

    mousecam_reset();

    int pid = mousecam_read_reg(ADNS3080_PRODUCT_ID);
    if (pid != ADNS3080_PRODUCT_ID_VAL)
        return -1;

    // turn on sensitive mode
    mousecam_write_reg(ADNS3080_CONFIGURATION_BITS, 0x19);

    return 0;
}

void mousecam_write_reg(int reg, int val) {
    spi_transaction_t t;
    memset(&t, 0, sizeof(t));       // Zero out the transaction
    uint8_t data[2] = {reg | 0x80, val};
    t.length = 16;                  // 8 bits for each byte
    t.tx_buffer = data;             // Data
    gpio_set_level(PIN_MOUSECAM_CS, 0);
    spi_device_transmit(spi, &t);   // Transmit
    gpio_set_level(PIN_MOUSECAM_CS, 1);
    ets_delay_us(50);
}

int mousecam_read_reg(int reg) {
    spi_transaction_t t;
    memset(&t, 0, sizeof(t));       // Zero out the transaction
    uint8_t data[2] = {reg, 0xff};
    uint8_t result;
    t.length = 8;                   // Only sending the register address
    t.tx_buffer = &data[0];
    t.rx_buffer = &result;
    gpio_set_level(PIN_MOUSECAM_CS, 0);
    spi_device_transmit(spi, &t);   // Transmit
    gpio_set_level(PIN_MOUSECAM_CS, 1);
    ets_delay_us(75);
    return result;
}

void mousecam_read_motion(struct MD *p) {
    spi_transaction_t t;
    uint8_t data = ADNS3080_MOTION_BURST;
    memset(&t, 0, sizeof(t));
    t.length = 8;
    t.tx_buffer = &data;
    gpio_set_level(PIN_MOUSECAM_CS, 0);
    spi_device_transmit(spi, &t);
    ets_delay_us(75);
    if (burst & 0x10)
        ESP_LOGI("MOUSECAM", "Overflow");
    // Aquí se debería leer el resto de los datos como en el código Arduino
    gpio_set_level(PIN_MOUSECAM_CS, 1);
    ets_delay_us(5);
}

int mousecam_frame_capture(uint8_t *pdata) {
    mousecam_write_reg(ADNS3080_FRAME_CAPTURE, 0x83);

    spi_transaction_t t;
    memset(&t, 0, sizeof(t));       // Zero out the transaction
    uint8_t data = ADNS3080_PIXEL_BURST;
    t.length = 8;
    t.tx_buffer = &data;
    gpio_set_level(PIN_MOUSECAM_CS, 0);
    spi_device_transmit(spi, &t);
    ets_delay_us(50);

    uint8_t pix;
    uint8_t started = 0;
    int count;
    int timeout = 0;
    int ret = 0;
    for (count = 0; count < ADNS3080_PIXELS_X * ADNS3080_PIXELS_Y;) {
        t.length = 8;
        t.rx_buffer = &pix;
        spi_device_transmit(spi, &t);
        ets_delay_us(10);
        if (started == 0) {
            if (pix & 0x40)
                started = 1;
            else {
                timeout++;
                if (timeout == 100) {
                    ret = -1;
                    break;
                }
            }
        }
        if (started == 1) {
            pdata[count++] = pix << 2; // scale to normal grayscale byte range
        }
    }

    gpio_set_level(PIN_MOUSECAM_CS, 1);
    ets_delay_us(14);

    return ret;
}
