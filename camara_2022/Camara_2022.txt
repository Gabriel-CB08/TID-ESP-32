#include "SPI.h"
#include <Wire.h>   // ???
#include <VL53L0X.h>  // Pololu 1.0.2
#include "KickFiltersRT.h"
#include <PID_v1.h>

////////////////////////////////////////////
//                                        //
//       DEFINICIONES SENSOR OPTICO       //
//                                        //
////////////////////////////////////////////

#define REFERENCE 8
#define KP 15
#define KI 50
#define KD 3
#define CUTFREQ .5
#define DELTAT 50

#define DELAY_CAM   50

#define PIN_SS       10  // Asegúrate de definir correctamente los pines para el ESP32-S3
#define PIN_MISO     19
#define PIN_MOSI     23
#define PIN_SCK      18

#define PIN_MOUSECAM_RESET     14
#define PIN_MOUSECAM_CS        16 //D3

#define ADNS3080_PIXELS_X                30
#define ADNS3080_PIXELS_Y                30

#define ADNS3080_PRODUCT_ID            0x00
#define ADNS3080_REVISION_ID           0x01
#define ADNS3080_MOTION                0x02
#define ADNS3080_DELTA_X               0x03
#define ADNS3080_DELTA_Y               0x04
#define ADNS3080_SQUAL                 0x05
#define ADNS3080_PIXEL_SUM             0x06
#define ADNS3080_MAXIMUM_PIXEL         0x07
#define ADNS3080_CONFIGURATION_BITS    0x0a
#define ADNS3080_EXTENDED_CONFIG       0x0b
#define ADNS3080_DATA_OUT_LOWER        0x0c
#define ADNS3080_DATA_OUT_UPPER        0x0d
#define ADNS3080_SHUTTER_LOWER         0x0e
#define ADNS3080_SHUTTER_UPPER         0x0f
#define ADNS3080_FRAME_PERIOD_LOWER    0x10
#define ADNS3080_FRAME_PERIOD_UPPER    0x11
#define ADNS3080_MOTION_CLEAR          0x12
#define ADNS3080_FRAME_CAPTURE         0x13
#define ADNS3080_SROM_ENABLE           0x14
#define ADNS3080_FRAME_PERIOD_MAX_BOUND_LOWER      0x19
#define ADNS3080_FRAME_PERIOD_MAX_BOUND_UPPER      0x1a
#define ADNS3080_FRAME_PERIOD_MIN_BOUND_LOWER      0x1b
#define ADNS3080_FRAME_PERIOD_MIN_BOUND_UPPER      0x1c
#define ADNS3080_SHUTTER_MAX_BOUND_LOWER           0x1e
#define ADNS3080_SHUTTER_MAX_BOUND_UPPER           0x1e
#define ADNS3080_SROM_ID               0x1f
#define ADNS3080_OBSERVATION           0x3d
#define ADNS3080_INVERSE_PRODUCT_ID    0x3f
#define ADNS3080_PIXEL_BURST           0x40
#define ADNS3080_MOTION_BURST          0x50
#define ADNS3080_SROM_LOAD             0x60

#define ADNS3080_PRODUCT_ID_VAL        0x17

VL53L0X SensorToF;
struct MD               // Estructura para las mediciones de mouse_cam
{
	uint8_t motion;
	int8_t dx, dy;
	uint8_t squal; //surface quality
	uint16_t shutter;
	uint8_t max_pix;
	int over;
};

////////////////////////////////////////////////////
//          Configuración motor DC      ////////////
////////////////////////////////////////////////////
const int Control_fwd = 25;                //  Pin AIN1  [Control del sentido de rotación +]
const int Control_back = 26;            //  Pin AIN2   [Control del sentido de rotación -]
const int Control_v = 12;                 //  Pin PWMA    [Control de la velocidad de rotación]
int MotorSpeed = 0;                   // Velocidad del motor  0..1024
int MotorDirection = 0;               // Avanzar (1) o Retroceder (0)

void SetMotorControl() {
	if (MotorDirection == 1)            //Avanzar
	{
		digitalWrite(Control_fwd, LOW);
		digitalWrite(Control_back, HIGH);
	}
	else                                //Retroceder
	{
		digitalWrite(Control_fwd, HIGH);
		digitalWrite(Control_back, LOW);
	}
	ledcWrite(Control_v, MotorSpeed); // esp32 (PIN, duty cycle PWM)
}
/*-------------------------------------------------------------------*/
void averageDistance(double* x_0, int N){
  for (int i = 0; i < N; i++) {
    uint16_t range = SensorToF.readReg16Bit(SensorToF.RESULT_RANGE_STATUS + 10);
    *x_0 += (double) range;
    delay(100);
  }
  *x_0 = *x_0 / (10*N); //[cm]
}
//double scale = 0.0079;	// carro 1
double scale = 0.0124;		// carro 2

/*-------------------------------------------------------------------*/
typedef struct butterworth {
  double x_vec[3];
  double y_vec[3];
  double b[3];
  double a[3];
  double b_coeff[3];
  double a_coeff[3];
  double G;
  int N = 3;
  butterworth(double wn){
    G = wn*wn/(4/(PI*PI)-2*sqrt(2)*wn/PI+wn*wn);
    bzero(x_vec, N*sizeof(double));
    bzero(y_vec, N*sizeof(double));
    bzero(b, N*sizeof(double));
    bzero(a, N*sizeof(double));
    b_coeff[0] = 1;
    b_coeff[1] = 2;
    b_coeff[2] = 1;
    a_coeff[2] = 1;
    a_coeff[1] = (2*pow(wn,2)-8/(pow(M_PI,2)))/(4/(pow(M_PI,2))-2*sqrt(2)*wn/M_PI+pow(wn,2));
    a_coeff[0] = (4/(pow(M_PI,2))+2*sqrt(2)*wn/M_PI+pow(wn,2))/(4/(pow(M_PI,2))-2*sqrt(2)*wn/M_PI+pow(wn,2));
    double aa = M_PI;
    if(b_coeff != NULL)
      memcpy(b, b_coeff, N*sizeof(double));
    if(a_coeff != NULL)
      memcpy(a, a_coeff, N*sizeof(double));
  }
  double butter_filtering(double x){
    double ma = 0;
    double ar = 0;
    memmove(x_vec + 1, x_vec, (N-1)*sizeof(double));
    memmove(y_vec + 1, y_vec, (N-1)*sizeof(double));
    x_vec[0] = x;
    // moving average
    for(int n=0; n < N; n++){
      ma += b[n]*x_vec[n];
    }
    // auto regressive
    for(int n=1; n < N; n++){
      ar += (-1)*a[n]*y_vec[n];
    }
    y_vec[0] = (ar + G*ma)/a_coeff[0];
    return y_vec[0];
    }
} butterworth;
/*-------------------------------------------------------------------*/

double mSpeed;
double velocity;
double reference;
double absvelocity;

double dead;

double Kp = KP, Ki = KI, Kd = KD;
PID myPID(&absvelocity, &mSpeed, &reference, Kp, Ki, Kd, DIRECT);
 
/*-------------------------------------------------------------------*/
void setup() {
  myPID.SetSampleTime(DELTAT);
	Serial.begin(115200);
	Serial.println("");
	/////////////////////////////////////
	///       Inicio Motor         //////
	/////////////////////////////////////
	pinMode(Control_fwd, OUTPUT);   // 1A - Definición Pin como salida
	pinMode(Control_back, OUTPUT);    // 2A - Definición Pin como salida
	pinMode(Control_v, OUTPUT);       // 1,2 EN - Definición Pin como salida
	digitalWrite(Control_v, HIGH);    // Motor off - O Volts (HIGH = 0, por algún motivo)
	ledcSetup(Control_v, 100, 10); //Freq a 100 Hz ESP32 resolución 10 bits
	ledcAttachPin( 12, Control_v);

	///////////////////////////////////////////
	//         Inicio de Sensores           ///
	///////////////////////////////////////////
	Wire.begin(); //Initiate the Wire library and join the I2C bus as a master or slave. This should normally be called only once.
	SensorToF.init();
	SensorToF.setTimeout(500);
	SensorToF.setMeasurementTimingBudget(33000);
	SensorToF.startContinuous();

	pinMode(PIN_MISO,INPUT);
	pinMode(PIN_MOSI,OUTPUT);
	pinMode(PIN_SCK,OUTPUT);
	SPI.begin();
	SPI.setClockDivider(SPI_CLOCK_DIV8);
	SPI.setDataMode(SPI_MODE3);
	SPI.setBitOrder(MSBFIRST);
	Serial.println("Iniciando Cámara");
	if(mousecam_init() == -1)
	{
		Serial.println("Fallo de la cámara óptica. Reinicie...");
		while(1);
	}
	Serial.println("Configurando PID");
	myPID.SetMode(AUTOMATIC);
	myPID.SetOutputLimits(-255, 255);
	myPID.SetControllerDirection(DIRECT);
	delay(1000);
	Serial.println("Mediciones del sensor ToF:");
	reference = 0;
	averageDistance(&reference, 10);
}
/*-------------------------------------------------------------------*/

void loop() {
	// Determinamos velocidad con cámara
	MD md;
	mousecam_read_motion(&md);
	velocity = 0.5*velocity + scale*(md.dx*md.dy)/DELAY_CAM; // moving average

	absvelocity = abs(velocity);
	reference = REFERENCE;

	// Aplicamos filtro butterworth
	butterworth butter(5.0/200); // Crear una instancia del filtro
	absvelocity = butter.butter_filtering(absvelocity); // Aplicar filtro butterworth a absvelocity

	myPID.Compute();
	MotorSpeed = (int)mSpeed;

	// Control Motor
	if (velocity > 0.1){
		MotorDirection = 1;       // Avanzar
	}
	else if (velocity < -0.1){
		MotorDirection = 0;       // Retroceder
	}
	else{
		MotorSpeed = 0;
	}

	SetMotorControl();
	delay(DELAY_CAM);

	Serial.print("Ref: ");
	Serial.print(reference);
	Serial.print(" absvelocity: ");
	Serial.print(absvelocity);
	Serial.print(" PID: ");
	Serial.println(mSpeed);
}
/*-------------------------------------------------------------------*/
int convTwosComp(int b){
	// Convert from 2's complement
	if(b & 0x80){
		b = -1 * ((b ^ 0xff) + 1);
	}
	return b;
}
/*-------------------------------------------------------------------*/
int mousecam_init(){
	pinMode(PIN_MOUSECAM_RESET,OUTPUT);
	pinMode(PIN_MOUSECAM_CS,OUTPUT);

	digitalWrite(PIN_MOUSECAM_RESET,HIGH);
	digitalWrite(PIN_MOUSECAM_CS,HIGH);

	digitalWrite(PIN_MOUSECAM_RESET,LOW);
	delay(1);
	digitalWrite(PIN_MOUSECAM_RESET,HIGH);
	delay(35);

	digitalWrite(PIN_MOUSECAM_CS,LOW);
	delayMicroseconds(1);
	digitalWrite(PIN_MOUSECAM_CS,HIGH);
	delayMicroseconds(1);

	int pid = mousecam_read_reg(ADNS3080_PRODUCT_ID);
	if(pid != ADNS3080_PRODUCT_ID_VAL)
		return -1;

	//turn on sensitive mode
	mousecam_write_reg(ADNS3080_CONFIGURATION_BITS, 0x19);
	return 0;
}
/*-------------------------------------------------------------------*/
void mousecam_write_reg(int reg, int val){
	digitalWrite(PIN_MOUSECAM_CS,LOW);
	SPI.transfer(reg | 0x80);
	SPI.transfer(val);
	digitalWrite(PIN_MOUSECAM_CS,HIGH);
	delayMicroseconds(1);
}
/*-------------------------------------------------------------------*/
int mousecam_read_reg(int reg){
	digitalWrite(PIN_MOUSECAM_CS,LOW);
	SPI.transfer(reg);
	delayMicroseconds(1);
	int ret = SPI.transfer(0xff);
	digitalWrite(PIN_MOUSECAM_CS,HIGH);
	delayMicroseconds(1);
	return ret;
}
/*-------------------------------------------------------------------*/
void mousecam_read_motion(struct MD *p){
	digitalWrite(PIN_MOUSECAM_CS,LOW);
	SPI.transfer(ADNS3080_MOTION_BURST);
	delayMicroseconds(1);
	p->motion =  SPI.transfer(0xff);
	p->dx =  SPI.transfer(0xff);
	p->dy =  SPI.transfer(0xff);
	p->squal =  SPI.transfer(0xff);
	p->shutter =  SPI.transfer(0xff)<<8;
	p->shutter |=  SPI.transfer(0xff);
	p->max_pix =  SPI.transfer(0xff);
	digitalWrite(PIN_MOUSECAM_CS,HIGH);
	delayMicroseconds(1);
}

