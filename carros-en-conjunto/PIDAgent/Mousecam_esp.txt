#include <driver/gpio.h>
#include <driver/spi_master.h>

#define PIN_MOUSECAM_RESET 4   // Update with the actual pin number for your setup
#define PIN_MOUSECAM_CS 5      // Update with the actual pin number for your setup

// SPI configuration
spi_device_handle_t spi;

void mousecam_reset()
{
    gpio_set_level((gpio_num_t)PIN_MOUSECAM_RESET, 1);
    ets_delay_us(10); // reset pulse >10us
    gpio_set_level((gpio_num_t)PIN_MOUSECAM_RESET, 0);
    ets_delay_us(500); // 35ms from reset to functional
}

int mousecam_init()
{
    gpio_set_direction((gpio_num_t)PIN_MOUSECAM_RESET, GPIO_MODE_OUTPUT);
    gpio_set_direction((gpio_num_t)PIN_MOUSECAM_CS, GPIO_MODE_OUTPUT);

    gpio_set_level((gpio_num_t)PIN_MOUSECAM_CS, 1);

    mousecam_reset();

    int pid = mousecam_read_reg(ADNS3080_PRODUCT_ID);
    if (pid != ADNS3080_PRODUCT_ID_VAL)
        return -1;

    // turn on sensitive mode
    mousecam_write_reg(ADNS3080_CONFIGURATION_BITS, 0x19);

    return 0;
}

void mousecam_write_reg(int reg, int val)
{
    spi_transaction_t t;
    memset(&t, 0, sizeof(t));       // Zero out the transaction
    uint8_t data[2] = {(uint8_t)(reg | 0x80), (uint8_t)val};
    t.length = 8 * 2;               // 8 bits per byte * 2 bytes
    t.tx_buffer = data;

    gpio_set_level((gpio_num_t)PIN_MOUSECAM_CS, 0);
    spi_device_transmit(spi, &t);
    gpio_set_level((gpio_num_t)PIN_MOUSECAM_CS, 1);

    ets_delay_us(50);
}

int mousecam_read_reg(int reg)
{
    spi_transaction_t t;
    memset(&t, 0, sizeof(t));       // Zero out the transaction
    uint8_t tx_data = (uint8_t)reg;
    uint8_t rx_data;
    t.length = 8;                   // 8 bits per byte
    t.tx_buffer = &tx_data;
    t.rxlength = 8;                 // Receive 8 bits
    t.rx_buffer = &rx_data;

    gpio_set_level((gpio_num_t)PIN_MOUSECAM_CS, 0);
    spi_device_transmit(spi, &t);
    gpio_set_level((gpio_num_t)PIN_MOUSECAM_CS, 1);

    ets_delay_us(75);
    return rx_data;
}

void mousecam_read_motion(struct MD *p)
{
    spi_transaction_t t;
    memset(&t, 0, sizeof(t));       // Zero out the transaction
    uint8_t tx_data = ADNS3080_MOTION_BURST;
    uint8_t rx_data[7];
    t.length = 8;                   // 8 bits per byte
    t.tx_buffer = &tx_data;
    t.rxlength = 8 * 7;             // Receive 7 bytes
    t.rx_buffer = rx_data;

    gpio_set_level((gpio_num_t)PIN_MOUSECAM_CS, 0);
    spi_device_transmit(spi, &t);
    gpio_set_level((gpio_num_t)PIN_MOUSECAM_CS, 1);

    ets_delay_us(75);
    if (rx_data[0] & 0x10)
        printf("Overflow\n");

    p->motion = rx_data[1];
    p->dx = rx_data[2];
    p->dy = rx_data[3];
    p->squal = rx_data[4];
    p->shutter = (rx_data[5] << 8) | rx_data[6];
    p->max_pix = rx_data[7];

    ets_delay_us(5);
}

int mousecam_frame_capture(uint8_t *pdata)
{
    mousecam_write_reg(ADNS3080_FRAME_CAPTURE, 0x83);

    spi_transaction_t t;
    memset(&t, 0, sizeof(t));       // Zero out the transaction
    uint8_t tx_data = ADNS3080_PIXEL_BURST;
    t.length = 8;                   // 8 bits per byte
    t.tx_buffer = &tx_data;

    gpio_set_level((gpio_num_t)PIN_MOUSECAM_CS, 0);
    spi_device_transmit(spi, &t);
    ets_delay_us(50);

    uint8_t pix;
    int count = 0;
    int timeout = 0;
    int ret = 0;
    byte started = 0;
    while (count < ADNS3080_PIXELS_X * ADNS3080_PIXELS_Y)
    {
        spi_transaction_t t;
        memset(&t, 0, sizeof(t));  // Zero out the transaction
        uint8_t tx_dummy = 0xff;
        uint8_t rx_data;
        t.length = 8;              // 8 bits per byte
        t.tx_buffer = &tx_dummy;
        t.rxlength = 8;
        t.rx_buffer = &rx_data;

        spi_device_transmit(spi, &t);
        pix = rx_data;
        ets_delay_us(10);
        if (started == 0)
        {
            if (pix & 0x40)
                started = 1;
            else
            {
                timeout++;
                if (timeout == 100)
                {
                    ret = -1;
                    break;
                }
            }
        }
        if (started == 1)
        {
            pdata[count++] = pix << 2; // scale to normal grayscale byte range
        }
    }

    gpio_set_level((gpio_num_t)PIN_MOUSECAM_CS, 1);
    ets_delay_us(14);

    return ret;
}

void app_main()
{
    // SPI bus configuration
    spi_bus_config_t buscfg = {
        .miso_io_num = 19, // Update with your MISO pin
        .mosi_io_num = 23, // Update with your MOSI pin
        .sclk_io_num = 18, // Update with your SCLK pin
        .quadwp_io_num = -1,
        .quadhd_io_num = -1
    };

    // Initialize the SPI bus
    spi_bus_initialize(HSPI_HOST, &buscfg, 1);

    // SPI device configuration
    spi_device_interface_config_t devcfg = {
        .clock_speed_hz = 1000000,    // Clock out at 1 MHz
        .mode = 3,                    // SPI mode 3
        .spics_io_num = PIN_MOUSECAM_CS,
        .queue_size = 1
    };

    // Attach the ADNS3080 to the SPI bus
    spi_bus_add_device(HSPI_HOST, &devcfg, &spi);

    // Initialize the mousecam
    if (mousecam_init() != 0)
    {
        printf("Mousecam initialization failed!\n");
    }
    else
    {
        printf("Mousecam initialized successfully!\n");
    }
}
