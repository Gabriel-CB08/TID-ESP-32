/*
 * Last Modified: 04-19-2022
 */

#include <PID_v1.h>
#include <WiFi.h>
#include <PubSubClient.h>
#include "SPI.h"
#include <Wire.h>
#include <VL53L0X.h>
#include <esp_wifi_types.h>
#include <esp_wifi_internal.h>
#include <esp_wifi.h>
#include <esp_now.h>
#include <WiFiUDP.h>
#include "math.h"

#include "KickFiltersRT.h"

#define DATARATE        WIFI_PHY_RATE_6M
#define CHANNEL         3
#define DELAY_CAM       800

#define ONBOARD_LED  2

#define PAYLOAD_SIZE    6
#define Ts              20

#define n_carro         3
#define delay_size      40

String carro = "carro" + String(random(100));
char treneserror[] = "trenes/carroD/error";
char trenesp[] = "trenes/carroD/p";
char trenesi[] = "trenes/carroD/i";
char trenesd[] = "trenes/carroD/d";
char trenesp_v[] = "trenes/carroD/p_v";
char trenesi_v[] = "trenes/carroD/i_v";
char trenesd_v[] = "trenes/carroD/d_v";
char trenesdesfase[] = "trenes/carroD/desfase";
char trenesestado[] = "trenes/estado/carroD";
char trenestest[] = "trenes/carroD/test";
char trenessampletime[] = "trenes/carroD/ts";
char trenestransmision[] = "trenes/envio";
int t_envio = 50;

typedef struct filterIIR {
    double x_vec[20];
    double y_vec[20];
    double b[20];
    double a[20];
    double G;
    int N;
    filterIIR(int N_points, double *b_coeff, double *a_coeff, double gain = 1){
        N = N_points;
        G = gain;
        memset(x_vec, 0, N*sizeof(double));
        memset(y_vec, 0, N*sizeof(double));
        memset(b, 0, N*sizeof(double));
        memset(a, 0, N*sizeof(double));
        if(b_coeff != NULL)
            memcpy(b, b_coeff, N*sizeof(double));
        if(a_coeff != NULL)
            memcpy(a, a_coeff, N*sizeof(double));
    }
    double filtering(double x){
        double ma = 0;
        double ar = 0;
        memmove(x_vec + 1, x_vec, (N-1)*sizeof(double));
        memmove(y_vec + 1, y_vec, (N-1)*sizeof(double));
        x_vec[0] = x;
        for(int n=0; n < N; n++){
            ma += b[n]*x_vec[n];
        }
        for(int n=1; n < N; n++){
            ar += (-1)*a[n]*y_vec[n];
        }
        y_vec[0] = ar + G*ma;
        return y_vec[0];
    }
} filterIIR;

typedef struct butterworth {
    double x_vec[3];
    double y_vec[3];
    double b[3];
    double a[3];
    double b_coeff[3];
    double a_coeff[3];
    double G;
    int N = 3;
    butterworth(double wn){
        G = wn*wn/(4/(PI*PI)-2*sqrt(2)*wn/PI+wn*wn);
        memset(x_vec, 0, N*sizeof(double));
        memset(y_vec, 0, N*sizeof(double));
        memset(b, 0, N*sizeof(double));
        memset(a, 0, N*sizeof(double));
        b_coeff[0] = 1;
        b_coeff[1] = 2;
        b_coeff[2] = 1;
        a_coeff[2] = 1;
        a_coeff[1] = (2*pow(wn,2)-8/(pow(M_PI,2)))/(4/(pow(M_PI,2))-2*sqrt(2)*wn/M_PI+pow(wn,2));
        a_coeff[0] = (4/(pow(M_PI,2))+2*sqrt(2)*wn/M_PI+pow(wn,2))/(4/(pow(M_PI,2))-2*sqrt(2)*wn/M_PI+pow(wn,2));
        double aa = M_PI;
        if(b_coeff != NULL)
            memcpy(b, b_coeff, N*sizeof(double));
        if(a_coeff != NULL)
            memcpy(a, a_coeff, N*sizeof(double));
    }
    double filtering(double x){
        double ma = 0;
        double ar = 0;
        memmove(x_vec + 1, x_vec, (N-1)*sizeof(double));
        memmove(y_vec + 1, y_vec, (N-1)*sizeof(double));
        x_vec[0] = x;
        for(int n=0; n < N; n++){
            ma += b[n]*x_vec[n];
        }
        for(int n=1; n < N; n++){
            ar += (-1)*a[n]*y_vec[n];
        }
        y_vec[0] = (ar + G*ma)/a_coeff[0];
        return y_vec[0];
    }
} butterworth;

double Gain_butter = 0.0201;
double b_butter[3] = {1, 2, 1};
double a_butter[3] = {1, -1.5610, 0.6414};
butterworth filterPosB(0.15);

const char* ssid = "fvp";
const char* password = "nomeacuerdo";
const char* mqtt_server = "192.168.1.101";

WiFiUDP udp;
uint32_t udp_port = 3333;
const char* udp_server = "192.168.1.104";
double udp_buffer[PAYLOAD_SIZE];
uint32_t t_udp = 0;

WiFiClient espClient;
PubSubClient client(espClient);
long lastMsg = 0;
char msg[50];

uint8_t mac_leader[] = {0x1A, 0x2B, 0x3C, 0x4D, 0x5E, 0x6F};
uint8_t mac_list[][6] = { {0x24, 0x0A, 0xC4, 0x31, 0x34, 0x18},
                          {0x24, 0x0A, 0xC4, 0x32, 0x0E, 0x20},
                          {0x24, 0x0A, 0xC4, 0x32, 0x14, 0x80},
                          {0x24, 0x0A, 0xC4, 0x32, 0x37, 0xAC}
                        };
uint8_t mac_addr_broadcast[] = {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};
bool received, resend;
uint32_t rcv_time = 0;

typedef struct {
    uint32_t timestamp;
    double position;
    double velocity;
} ESPNOW_payload;

double monitor_data[5];
double data_com[2];
ESPNOW_payload rcv_data;

esp_now_peer_info_t peerInfo;

const int Control_fwd = 25;
const int Control_back = 26;
const int Control_v = 12;
int MotorSpeed = 0;
int MotorDirection = 1;

VL53L0X SensorToF;
double pos_med = 25;
double temp_cal;
double last_distance = 0;
double time_old = 0;
double t_old;
double t1;
double t2;

struct MD {
    byte motion;
    char dx, dy;
    byte squal;
    word shutter;
    byte max_pix;
    int over;
};
double last_vel = 0;
double vel_lim = 50;
double scale;

void averageDistance(double* x_0, int N){
    for (int i = 0; i < N; i++) {
        uint16_t range = SensorToF.readReg16Bit(VL53L0X::RESULT_RANGE_STATUS + 10);
        *x_0 += (double) range;
        delay(100);
    }
    *x_0 = *x_0 / (10*N);
}

int dead = 1;
int deadband = 300;
int tiempo_inicial = 0;

double Setpoint, Input, Output;
double vel_sp, vel_ip, vel_op;
double Kp_vel = 0.4, Ki_vel = 0.05, Kd_vel = 0.01;
PID myPID(&Input, &Output, &Setpoint,0.1,0.02,0.01, DIRECT);
PID vel_PID(&vel_ip, &vel_op, &vel_sp, Kp_vel, Ki_vel, Kd_vel, DIRECT);
KickFilterRT<double> KFVel;

double vel_estimada = 0;

double carPos = 0;
double setPos = 0;
double myPos = 0;
int period=0;
double pos[delay_size] = {0};

double desfase = 0;

void callback(char* topic, byte* message, unsigned int length) {
    Serial.print("Message arrived on topic: ");
    Serial.print(topic);
    Serial.print(". Message: ");
    String messageTemp;
    for (int i = 0; i < length; i++) {
        Serial.print((char)message[i]);
        messageTemp += (char)message[i];
    }
    Serial.println();
    if (String(topic) == trenesp) {
        Serial.print("Changing kp to ");
        Kp_vel = messageTemp.toDouble();
        vel_PID.SetTunings(Kp_vel, Ki_vel, Kd_vel);
    }
    if (String(topic) == trenesi) {
        Serial.print("Changing ki to ");
        Ki_vel = messageTemp.toDouble();
        vel_PID.SetTunings(Kp_vel, Ki_vel, Kd_vel);
    }
    if (String(topic) == trenesd) {
        Serial.print("Changing kd to ");
        Kd_vel = messageTemp.toDouble();
        vel_PID.SetTunings(Kp_vel, Ki_vel, Kd_vel);
    }
    if (String(topic) == trenesp_v) {
        Serial.print("Changing kp velocity to ");
        Kp_vel = messageTemp.toDouble();
        vel_PID.SetTunings(Kp_vel, Ki_vel, Kd_vel);
    }
    if (String(topic) == trenesi_v) {
        Serial.print("Changing ki velocity to ");
        Ki_vel = messageTemp.toDouble();
        vel_PID.SetTunings(Kp_vel, Ki_vel, Kd_vel);
    }
    if (String(topic) == trenesd_v) {
        Serial.print("Changing kd velocity to ");
        Kd_vel = messageTemp.toDouble();
        vel_PID.SetTunings(Kp_vel, Ki_vel, Kd_vel);
    }
    if (String(topic) == trenesdesfase) {
        Serial.print("Changing desfase to ");
        desfase = messageTemp.toDouble();
    }
    if (String(topic) == trenessampletime) {
        Serial.print("Changing sample time to ");
        vel_PID.SetSampleTime(messageTemp.toDouble());
        vel_PID.SetOutputLimits(-255,255);
        vel_PID.SetMode(AUTOMATIC);
    }
    if (String(topic) == trenestest) {
        Serial.print("Testing velocity control ");
        dead = messageTemp.toInt();
    }
}

void reconnect() {
    while (!client.connected()) {
        Serial.print("Attempting MQTT connection...");
        if (client.connect(carro.c_str())) {
            Serial.println("connected");
            client.subscribe(trenesp);
            client.subscribe(trenesi);
            client.subscribe(trenesd);
            client.subscribe(trenesp_v);
            client.subscribe(trenesi_v);
            client.subscribe(trenesd_v);
            client.subscribe(trenesdesfase);
            client.subscribe(trenestest);
            client.subscribe(trenessampletime);
        } else {
            Serial.print("failed, rc=");
            Serial.print(client.state());
            Serial.println(" try again in 5 seconds");
            delay(5000);
        }
    }
}

void OnDataRecv(const uint8_t * mac, const uint8_t *incomingData, int len) {
    memcpy(&rcv_data, incomingData, sizeof(rcv_data));
    monitor_data[1] = rcv_data.position;
    monitor_data[2] = rcv_data.velocity;
    rcv_time = millis();
    received = true;
}

void OnDataSent(const uint8_t *mac_addr, esp_now_send_status_t status) {
    Serial.print("\r\nLast Packet Send Status: ");
    Serial.println(status == ESP_NOW_SEND_SUCCESS ? "Delivery Success" : "Delivery Fail");
}

void setup() {
    Serial.begin(115200);

    pinMode(ONBOARD_LED, OUTPUT);

    Wire.begin();
    SensorToF.setTimeout(500);
    if (!SensorToF.init()) {
        Serial.println("Failed to detect and initialize sensor!");
        while (1) {}
    }
    SensorToF.setMeasurementTimingBudget(20000);
    SensorToF.startContinuous(20);

    WiFi.mode(WIFI_STA);
    WiFi.begin(ssid, password);
    while (WiFi.status() != WL_CONNECTED) {
        delay(1000);
        Serial.println("Connecting to WiFi...");
    }

    Serial.println("Connected to the WiFi network");
    client.setServer(mqtt_server, 1883);
    client.setCallback(callback);

    if (esp_now_init() != ESP_OK) {
        Serial.println("Error initializing ESP-NOW");
        return;
    }

    esp_now_register_recv_cb(OnDataRecv);
    esp_now_register_send_cb(OnDataSent);

    memcpy(peerInfo.peer_addr, mac_leader, 6);
    peerInfo.channel = 0;
    peerInfo.encrypt = false;
    
    if (esp_now_add_peer(&peerInfo) != ESP_OK){
        Serial.println("Failed to add peer");
        return;
    }

    myPID.SetMode(AUTOMATIC);
    myPID.SetSampleTime(Ts);
    myPID.SetOutputLimits(-255,255);

    vel_PID.SetMode(AUTOMATIC);
    vel_PID.SetSampleTime(Ts);
    vel_PID.SetOutputLimits(-255,255);

    t_udp = millis();

    udp.begin(udp_port);

    averageDistance(&pos_med, 10);
    t_old = millis();
    for (int i = 0; i < delay_size; i++) {
        pos[i] = pos_med;
    }
    pos_med = 0;
    KFVel.FilterInit(0.1);
    vel_PID.SetTunings(Kp_vel, Ki_vel, Kd_vel);
}

void loop() {
    if (!client.connected()) {
        reconnect();
    }
    client.loop();

    if (received && (millis()-rcv_time < t_envio)) {
        monitor_data[0] = millis();
        monitor_data[3] = carPos;
        monitor_data[4] = vel_estimada;
        udp.beginPacket(udp_server, udp_port);
        udp.write((uint8_t *)monitor_data, sizeof(monitor_data));
        udp.endPacket();
        received = false;
    }

    if ((millis() - t_udp) > t_envio) {
        t_udp = millis();
        monitor_data[0] = millis();
        monitor_data[3] = carPos;
        monitor_data[4] = vel_estimada;
        udp.beginPacket(udp_server, udp_port);
        udp.write((uint8_t *)monitor_data, sizeof(monitor_data));
        udp.endPacket();
    }

    vel_ip = (carPos-pos_med)*1000/(double)Ts;
    vel_sp = vel_op + pos_med*desfase;

    if (vel_PID.Compute()) {
        MotorSpeed = vel_op;
        MotorDirection = (vel_op > 0) ? 1 : 0;
        analogWrite(Control_v, abs(vel_op));
        digitalWrite(Control_fwd, MotorDirection);
        digitalWrite(Control_back, !MotorDirection);
    }

    Input = carPos;
    Setpoint = setPos;
    if (myPID.Compute()) {
        carPos += Output;
    }

    pos_med = SensorToF.readRangeContinuousMillimeters() / 10.0;
    if (SensorToF.timeoutOccurred()) {
        Serial.print(" TIMEOUT");
    }

    pos_med = filterPosB.filtering(pos_med);

    t1 = millis();
    vel_estimada = KFVel.Filter(carPos, (t1-t_old)/1000.0);
    t_old = t1;
}
