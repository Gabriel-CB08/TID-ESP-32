#include "freertos/FreeRTOS.h"
#include "freertos/task.h"
#include "driver/gpio.h"
#include "driver/ledc.h"
#include "esp_log.h"
#include "nvs_flash.h"
#include "esp_wifi.h"
#include "esp_now.h"
#include "mqtt_client.h"
#include "vl53l0x_api.h"
#include "driver/spi_master.h"

#define UART_NUM UART_NUM_1
#define BUF_SIZE (1024)
#define BAUD_RATE 115200

#define CONTROL_FWD GPIO_NUM_25
#define CONTROL_BACK GPIO_NUM_26
#define CONTROL_V GPIO_NUM_12

#define DATARATE WIFI_PHY_RATE_6M
#define CHANNEL 6
#define DELAY_CAM 800

static const char *TAG = "LeaderAgent";
esp_mqtt_client_handle_t client;
esp_now_peer_info_t peerInfo;

struct filterIIR {
    double x_vec[20];
    double y_vec[20];
    double b[20];
    double a[20];
    int N;
    filterIIR(double *b_coeff, double *a_coeff, int N_points) {
        N = N_points;
        memset(x_vec, 0, N * sizeof(double));
        memset(y_vec, 0, N * sizeof(double));
        memset(b, 0, N * sizeof(double));
        memset(a, 0, N * sizeof(double));
        if (b_coeff != NULL)
            memcpy(b, b_coeff, N * sizeof(double));
        if (a_coeff != NULL)
            memcpy(a, a_coeff, N * sizeof(double));
    }
    double filtering(double x) {
        double ma = 0;
        double ar = 0;
        memmove(x_vec + 1, x_vec, (N - 1) * sizeof(double));
        memmove(y_vec + 1, y_vec, (N - 1) * sizeof(double));
        x_vec[0] = x;
        for (int n = 0; n < N; n++) {
            ma += b[n] * x_vec[n];
        }
        for (int n = 1; n < N; n++) {
            ar += (-1) * a[n] * y_vec[n];
        }
        y_vec[0] = ar + ma;
        return y_vec[0];
    }
};

double b_win[5] = {0.2, 0.2, 0.2, 0.2, 0.2};
filterIIR filterPos(b_win, NULL, 5);

double pos_med = 10;
double last_vel = 0;
double v_medida = 0;
uint32_t time_old = 0;
uint32_t t_old = 0;
uint32_t t1 = 0;
bool flag = true;
bool start = false;
bool run_test = false;
int MotorSpeed = 0;
int MotorDirection = 1;

typedef struct {
    uint32_t timestamp;
    double position;
    double velocity;
} ESPNOW_payload_t;

ESPNOW_payload_t ESPNOW_payload;

uint8_t mac_leader[] = {0x1A, 0x2B, 0x3C, 0x4D, 0x5E, 0x6F};
uint8_t mac_A[] = {0xc8, 0x2b, 0x96, 0xb4, 0xe6, 0xcc};
uint8_t mac_addr_broadcast[] = {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};

VL53L0X_Dev_t SensorToF;

void init_uart() {
    const uart_config_t uart_config = {
        .baud_rate = BAUD_RATE,
        .data_bits = UART_DATA_8_BITS,
        .parity = UART_PARITY_DISABLE,
        .stop_bits = UART_STOP_BITS_1,
        .flow_ctrl = UART_HW_FLOWCTRL_DISABLE
    };
    uart_param_config(UART_NUM, &uart_config);
    uart_set_pin(UART_NUM, GPIO_NUM_23, GPIO_NUM_19, UART_PIN_NO_CHANGE, UART_PIN_NO_CHANGE);
    uart_driver_install(UART_NUM, BUF_SIZE * 2, 0, 0, NULL, 0);
}

void init_spi() {
    spi_bus_config_t buscfg = {
        .miso_io_num = GPIO_NUM_19,
        .mosi_io_num = GPIO_NUM_23,
        .sclk_io_num = GPIO_NUM_18,
        .quadwp_io_num = -1,
        .quadhd_io_num = -1,
    };

    spi_device_interface_config_t devcfg = {
        .clock_speed_hz = 1 * 1000 * 1000,
        .mode = 0,
        .spics_io_num = GPIO_NUM_5,
        .queue_size = 7,
    };

    ESP_ERROR_CHECK(spi_bus_initialize(HSPI_HOST, &buscfg, 1));
    ESP_ERROR_CHECK(spi_bus_add_device(HSPI_HOST, &devcfg, &spi));
}

void init_pwm() {
    ledc_timer_config_t ledc_timer = {
        .speed_mode = LEDC_HIGH_SPEED_MODE,
        .timer_num = LEDC_TIMER_0,
        .duty_resolution = LEDC_TIMER_10_BIT,
        .freq_hz = 5000,
        .clk_cfg = LEDC_AUTO_CLK
    };
    ledc_timer_config(&ledc_timer);

    ledc_channel_config_t ledc_channel = {
        .speed_mode = LEDC_HIGH_SPEED_MODE,
        .channel = LEDC_CHANNEL_0,
        .timer_sel = LEDC_TIMER_0,
        .intr_type = LEDC_INTR_DISABLE,
        .gpio_num = CONTROL_V,
        .duty = 0,
        .hpoint = 0
    };
    ledc_channel_config(&ledc_channel);
}

void set_motor_control() {
    if (MotorDirection == 1) {
        gpio_set_level(CONTROL_FWD, 0);
        gpio_set_level(CONTROL_BACK, 1);
    } else {
        gpio_set_level(CONTROL_FWD, 1);
        gpio_set_level(CONTROL_BACK, 0);
    }

    ledc_set_duty(LEDC_HIGH_SPEED_MODE, LEDC_CHANNEL_0, MotorSpeed);
    ledc_update_duty(LEDC_HIGH_SPEED_MODE, LEDC_CHANNEL_0);
}

void on_data_sent(const uint8_t *mac_addr, esp_now_send_status_t status) {
    ESP_LOGI(TAG, "ESP-NOW Data Sent");
}

void on_data_recv(const uint8_t *mac_addr, const uint8_t *incomingData, int len) {
    ESP_LOGI(TAG, "ESP-NOW Data Received");
}

void init_espnow() {
    ESP_ERROR_CHECK(esp_now_init());
    ESP_ERROR_CHECK(esp_now_register_send_cb(on_data_sent));
    ESP_ERROR_CHECK(esp_now_register_recv_cb(on_data_recv));
    ESP_ERROR_CHECK(esp_wifi_set_channel(CHANNEL, WIFI_SECOND_CHAN_NONE));

    memcpy(peerInfo.peer_addr, mac_leader, 6);
    peerInfo.channel = CHANNEL;
    peerInfo.encrypt = false;

    if (esp_now_add_peer(&peerInfo) != ESP_OK) {
        ESP_LOGE(TAG, "Failed to add peer");
    }
}

void mqtt_callback(esp_mqtt_event_handle_t event) {
    client = event->client;
    switch (event->event_id) {
    case MQTT_EVENT_CONNECTED:
        ESP_LOGI(TAG, "MQTT_EVENT_CONNECTED");
        esp_mqtt_client_subscribe(client, "trenes/#", 0);
        break;
    case MQTT_EVENT_DATA:
        ESP_LOGI(TAG, "MQTT_EVENT_DATA");
        if (strcmp(event->topic, "trenes/start") == 0) {
            if (strcmp(event->data, "True") == 0) {
                run_test = true;
                ESP_LOGI(TAG, "Starting Test");
            }
        }
        break;
    default:
        break;
    }
}

void init_mqtt() {
    esp_mqtt_client_config_t mqtt_cfg = {
        .uri = "mqtt://192.168.1.114"
    };
    client = esp_mqtt_client_init(&mqtt_cfg);
    esp_mqtt_client_register_event(client, ESP_EVENT_ANY_ID, mqtt_callback, NULL);
    esp_mqtt_client_start(client);
}

void loop() {
    if (!flag) {
        char msg[50];
        snprintf(msg, sizeof(msg), "%f", (millis() - tiempo_inicial) * 0.001);
        esp_mqtt_client_publish(client, "trenes/carroA/desfase", msg, 0, 0, 0);
        flag = true;
        ESP_LOGI(TAG, "Sync!");
    }

    if (run_test) {
        esp_mqtt_client_disconnect(client);
        start = true;
        t1 = millis();
        run_test = false;
    }

    if (!start) {
        if (!esp_mqtt_client_is_connected(client)) {
            esp_now_deinit();
            init_mqtt();
            esp_now_init();
        }
        esp_mqtt_client_loop(client);
        return;
    }

    pos_med = 0;
    int count_cam = 0;
    int last_dy = 0;
    MD cam_med;

    for (int i = 0; i < 20; i++) {
        if (i % 5 == 1) {
            uint16_t range = VL53L0X_ReadRange(&SensorToF);
            pos_med += range;
        }
        mousecam_read_motion(&cam_med);
        int curr_dy = (int8_t) cam_med.dy;
        if (curr_dy * last_dy < 0 && abs(curr_dy) > abs(last_dy)) {
            curr_dy = last_dy;
        }
        count_cam += curr_dy;
        last_dy = curr_dy;
        uint32_t cam_t = micros();
        while (micros() - cam_t < DELAY_CAM);
    }
    mousecam_read_motion(&cam_med);
    count_cam += (int8_t) cam_med.dy;
    v_medida = (scale * 1000) * count_cam / (millis() - time_old);

    if (abs(v_medida) > vel_lim) {
        v_medida = last_vel;
    }
    last_vel = v_medida;
    time_old = millis();

    pos_med = pos_med / 40;
    pos_med = filterPos.filtering(pos_med);

    ESP_LOGI(TAG, "Position: %f", pos_med);

    uint32_t time_now = millis() - t_old;
    if (time_now > 50) {
        ESPNOW_payload.timestamp = time_now;
        ESPNOW_payload.velocity = v_medida;
        ESPNOW_payload.position = 20;
        esp_now_send(mac_addr_broadcast, (uint8_t*)&ESPNOW_payload, sizeof(ESPNOW_payload));
        t_old = millis();
    }

    if (millis() - t1 < 3000) return;

    if (abs(u) != 0 && pos_med > 12.0) {
        if (u >= 0) {
            MotorDirection = 1;
            MotorSpeed = u;
        } else {
            MotorDirection = 0;
            MotorSpeed = -u;
        }
    } else {
        if (MotorSpeed > 20)
            MotorSpeed -= 20;
        else {
            MotorSpeed = 0;
            u = 1;
            run_test = false;
        }
    }
    set_motor_control();
}

void app_main() {
    ESP_ERROR_CHECK(nvs_flash_init());
    init_uart();
    init_spi();
    init_pwm();
    init_espnow();
    init_mqtt();

    gpio_set_direction(CONTROL_FWD, GPIO_MODE_OUTPUT);
    gpio_set_direction(CONTROL_BACK, GPIO_MODE_OUTPUT);

    while (1) {
        loop();
        vTaskDelay(10 / portTICK_PERIOD_MS);
    }
}
