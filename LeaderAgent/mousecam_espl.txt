#include "freertos/FreeRTOS.h"
#include "freertos/task.h"
#include "driver/gpio.h"
#include "driver/spi_master.h"
#include "esp_log.h"

// Definiciones del sensor
#define PIN_MOUSECAM_RESET    GPIO_NUM_14
#define PIN_MOUSECAM_CS       GPIO_NUM_16

#define ADNS3080_PIXELS_X     30
#define ADNS3080_PIXELS_Y     30

#define ADNS3080_PRODUCT_ID   0x00
#define ADNS3080_PRODUCT_ID_VAL 0x17

#define ADNS3080_CONFIGURATION_BITS 0x0a
#define ADNS3080_MOTION_BURST       0x50
#define ADNS3080_FRAME_CAPTURE      0x83
#define ADNS3080_PIXEL_BURST        0x40

typedef struct {
    uint8_t motion;
    int8_t dx;
    int8_t dy;
    uint8_t squal;
    uint16_t shutter;
    uint8_t max_pix;
} MD;

spi_device_handle_t spi;

void mousecam_reset() {
    gpio_set_level(PIN_MOUSECAM_RESET, 1);
    ets_delay_us(10);
    gpio_set_level(PIN_MOUSECAM_RESET, 0);
    ets_delay_us(500);
}

int mousecam_init() {
    gpio_set_direction(PIN_MOUSECAM_RESET, GPIO_MODE_OUTPUT);
    gpio_set_direction(PIN_MOUSECAM_CS, GPIO_MODE_OUTPUT);

    gpio_set_level(PIN_MOUSECAM_CS, 1);

    mousecam_reset();

    int pid = mousecam_read_reg(ADNS3080_PRODUCT_ID);
    if (pid != ADNS3080_PRODUCT_ID_VAL)
        return -1;

    mousecam_write_reg(ADNS3080_CONFIGURATION_BITS, 0x19);
    return 0;
}

void mousecam_write_reg(uint8_t reg, uint8_t val) {
    spi_transaction_t t;
    memset(&t, 0, sizeof(t));
    t.length = 8;
    t.tx_buffer = &reg;
    gpio_set_level(PIN_MOUSECAM_CS, 0);
    spi_device_transmit(spi, &t);

    t.tx_buffer = &val;
    spi_device_transmit(spi, &t);
    gpio_set_level(PIN_MOUSECAM_CS, 1);
    ets_delay_us(50);
}

uint8_t mousecam_read_reg(uint8_t reg) {
    uint8_t ret;
    spi_transaction_t t;
    memset(&t, 0, sizeof(t));
    t.length = 8;
    t.tx_buffer = &reg;
    gpio_set_level(PIN_MOUSECAM_CS, 0);
    spi_device_transmit(spi, &t);

    t.rxlength = 8;
    t.flags = SPI_TRANS_USE_RXDATA;
    spi_device_transmit(spi, &t);
    ret = t.rx_data[0];
    gpio_set_level(PIN_MOUSECAM_CS, 1);
    ets_delay_us(1);
    return ret;
}

void mousecam_read_motion(MD *p) {
    uint8_t burst;
    spi_transaction_t t;
    memset(&t, 0, sizeof(t));
    t.length = 8;
    t.tx_buffer = &burst;
    burst = ADNS3080_MOTION_BURST;
    gpio_set_level(PIN_MOUSECAM_CS, 0);
    spi_device_transmit(spi, &t);

    t.rxlength = 8;
    t.flags = SPI_TRANS_USE_RXDATA;
    spi_device_transmit(spi, &t);
    burst = t.rx_data[0];
    ets_delay_us(75);

    t.rxlength = 48;
    t.length = 48;
    spi_device_transmit(spi, &t);
    p->motion = t.rx_data[0];
    p->dx = t.rx_data[1];
    p->dy = t.rx_data[2];
    p->squal = t.rx_data[3];
    p->shutter = (t.rx_data[4] << 8) | t.rx_data[5];
    p->max_pix = t.rx_data[6];

    gpio_set_level(PIN_MOUSECAM_CS, 1);
    ets_delay_us(5);
}

int mousecam_frame_capture(uint8_t *pdata) {
    mousecam_write_reg(ADNS3080_FRAME_CAPTURE, 0x83);

    uint8_t reg = ADNS3080_PIXEL_BURST;
    spi_transaction_t t;
    memset(&t, 0, sizeof(t));
    t.length = 8;
    t.tx_buffer = &reg;
    gpio_set_level(PIN_MOUSECAM_CS, 0);
    spi_device_transmit(spi, &t);

    t.rxlength = 8;
    t.flags = SPI_TRANS_USE_RXDATA;
    uint8_t pix;
    int count = 0;
    int timeout = 0;
    int ret = 0;
    bool started = false;
    for (count = 0; count < ADNS3080_PIXELS_X * ADNS3080_PIXELS_Y;) {
        spi_device_transmit(spi, &t);
        pix = t.rx_data[0];
        ets_delay_us(10);
        if (!started) {
            if (pix & 0x40)
                started = true;
            else {
                timeout++;
                if (timeout == 100) {
                    ret = -1;
                    break;
                }
            }
        }
        if (started) {
            pdata[count++] = pix << 2;
        }
    }
    gpio_set_level(PIN_MOUSECAM_CS, 1);
    ets_delay_us(14);
    return ret;
}

void init_spi() {
    spi_bus_config_t buscfg = {
        .miso_io_num = GPIO_NUM_19,
        .mosi_io_num = GPIO_NUM_23,
        .sclk_io_num = GPIO_NUM_18,
        .quadwp_io_num = -1,
        .quadhd_io_num = -1,
    };

    spi_device_interface_config_t devcfg = {
        .clock_speed_hz = 2 * 1000 * 1000,
        .mode = 3,
        .spics_io_num = PIN_MOUSECAM_CS,
        .queue_size = 7,
    };

    ESP_ERROR_CHECK(spi_bus_initialize(HSPI_HOST, &buscfg, 1));
    ESP_ERROR_CHECK(spi_bus_add_device(HSPI_HOST, &devcfg, &spi));
}

void app_main() {
    ESP_ERROR_CHECK(nvs_flash_init());

    init_spi();

    if (mousecam_init() == -1) {
        ESP_LOGE(TAG, "Failed to initialize the camera");
        return;
    }

    MD cam_med;
    uint8_t frame[ADNS3080_PIXELS_X * ADNS3080_PIXELS_Y];

    while (true) {
        mousecam_read_motion(&cam_med);
        ESP_LOGI(TAG, "Motion: %d, DX: %d, DY: %d, SQUAL: %d, Shutter: %d, Max Pixel: %d",
                 cam_med.motion, cam_med.dx, cam_med.dy, cam_med.squal, cam_med.shutter, cam_med.max_pix);
        vTaskDelay(1000 / portTICK_PERIOD_MS);

        if (mousecam_frame_capture(frame) == 0) {
            ESP_LOGI(TAG, "Frame captured successfully");
        } else {
            ESP_LOGE(TAG, "Failed to capture frame");
        }
    }
}
