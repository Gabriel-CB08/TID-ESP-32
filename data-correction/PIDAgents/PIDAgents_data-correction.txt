/*
 * Última modificación: 27-03-2021
 */

#include <PID_v1.h>
#include <WiFi.h>
#include <PubSubClient.h>
#include <SPI.h>
#include <Wire.h>   // ???
#include <VL53L0X.h>  // Pololu 1.0.2
#include <esp_wifi_types.h>
#include <esp_wifi_internal.h>
#include <esp_wifi.h>
#include <esp_now.h>
#include "KickFiltersRT.h"

#ifndef M_PI 
#define M_PI  3.14159265358979323846
#endif
#define DATARATE        WIFI_PHY_RATE_6M   // Para cambiar el bitrate de ESP-NOW a 24Mbps
#define CHANNEL         6                   // Canal WiFi
#define DELAY_CAM		800

////////////////////////////////////////////
///////////////////////////////////////////
String carro = "carro" + String(random(100));
//const char carro[] = "carroD2";
char treneserror[] = "trenes/carroD/error";
char trenesp[] = "trenes/carroD/p";
char trenesi[] = "trenes/carroD/i";
char trenesd[] = "trenes/carroD/d";
char trenesp_v[] = "trenes/carroD/p_v";
char trenesi_v[] = "trenes/carroD/i_v";
char trenesd_v[] = "trenes/carroD/d_v";
char trenesdesfase[] = "trenes/carroD/desfase";
char trenesestado[] = "trenes/estado/carroD"; 
char trenestest[] = "trenes/carroD/test";     // topic to send the data to analyze separated by "," (deprecated?)
char trenessampletime[] = "trenes/carroD/ts"; // topic to modify the PID sample time
char trenestransmision[] = "trenes/envio";    // topic to modify the transmission rate
int t_envio = 50;                             // default tx-rate;
///////////////////////////////////////////
/////////////////////////////////////////// 

/* Función para corregir el dato si es necesario */ 
double data_correction(double range, double prev_measure){
    static uint16_t range_buf[4]={0,0,0,0};
    static uint16_t change_counter=0;
    static uint16_t inv_counter;
    static uint16_t unmodified=0;
    static uint16_t last_okmes;  
    double range_corr; 

    if (range<1000) last_okmes = range;

    static uint16_t range_corrected;
    if(range<8000){                      // Corregir los casos en los que hay un error en la medición
        range_corrected = range;
    }
    range = range_corrected;
    if(range_buf[0]==0){
        range_buf[0] = range;
        range_buf[1] = range;
        range_buf[2] = range;
        range_buf[3] = range;
    }
      
    if(range!= range_buf[0]){
        memmove(range_buf + 1, range_buf, 3*sizeof(uint16_t));
        range_buf[0]= range;
    }

    double avg_range = (double(range_buf[1]) + double(range_buf[2]) + double(range_buf[3])) /3.0;
          
    bool valid_measure = 0;
    int coun = 0;

    if(abs(range-prev_measure)<50 && !unmodified){
        change_counter+=1;
    }
    else{
        change_counter=0;   
    }

    if((abs(range_buf[0]-avg_range)>30)){
        unmodified = 0;
        inv_counter++;
        if(inv_counter<5 && change_counter<3){
            range_corr = 0.5*range_buf[1]+0.5*avg_range;
            range_buf[0] = range_buf[1];
        }
    }
    else{
        range_corr=range_buf[0];
        inv_counter = 0;
        change_counter = 0;
        valid_measure = 1;
    }
    if(inv_counter==4){
        range_corr = last_okmes;
        range_buf[0]=last_okmes;
        inv_counter = 0;
        change_counter = 0;
    }
    if(change_counter==3){
        range_corr = last_okmes;
        range_buf[0]=last_okmes;
        inv_counter = 0;
        change_counter = 0;
    }
    return range_corr;
}

typedef struct butterworth {
    double x_vec[3];
    double y_vec[3];
    double b[3];
    double a[3];
    double b_coeff[3];
    double a_coeff[3];
    double G;
    int N = 3;
    
    butterworth(double wn){
        G = wn*wn/(4/(PI*PI)-2*sqrt(2)*wn/PI+wn*wn);
        bzero(x_vec, N*sizeof(double));
        bzero(y_vec, N*sizeof(double));
        bzero(b, N*sizeof(double));
        bzero(a, N*sizeof(double));
        b_coeff[0] = 1;
        b_coeff[1] = 2;
        b_coeff[2] = 1;
        a_coeff[2] = 1;
        a_coeff[1] = (2*pow(wn,2)-8/(pow(M_PI,2)))/(4/(pow(M_PI,2))-2*sqrt(2)*wn/M_PI+pow(wn,2));
        a_coeff[0] = (4/(pow(M_PI,2))+2*sqrt(2)*wn/M_PI+pow(wn,2))/(4/(pow(M_PI,2))-2*sqrt(2)*wn/M_PI+pow(wn,2));
        double aa = M_PI;
        if(b_coeff != NULL)
            memcpy(b, b_coeff, N*sizeof(double));
        if(a_coeff != NULL)
            memcpy(a, a_coeff, N*sizeof(double));
    }
    
    double butter_filtering(double x){
        double ma = 0;
        double ar = 0;
        memmove(x_vec + 1, x_vec, (N-1)*sizeof(double));
        memmove(y_vec + 1, y_vec, (N-1)*sizeof(double));
        x_vec[0] = x;
        
        // moving average
        for(int n=0; n < N; n++){
            ma += b[n]*x_vec[n];
        }
        
        // auto regressive
        for(int n=1; n < N; n++){
            ar += (-1)*a[n]*y_vec[n];
        }
        
        y_vec[0] = (ar + G*ma)/a_coeff[0];
        return y_vec[0];
    }
} butterworth;

typedef struct filterIIR {
    double x_vec[20];
    double y_vec[20];
    double b[20];
    double a[20];
    double G;
    int N;
    
    filterIIR(int N_points, double *b_coeff, double *a_coeff, double gain = 1){
        N = N_points;
        G = gain;
        bzero(x_vec, N*sizeof(double));
        bzero(y_vec, N*sizeof(double));
        bzero(b, N*sizeof(double));
        bzero(a, N*sizeof(double));
        if(b_coeff != NULL)
            memcpy(b, b_coeff, N*sizeof(double));
        if(a_coeff != NULL)
            memcpy(a, a_coeff, N*sizeof(double));
    }
    
    double filtering(double x){
        double ma = 0;
        double ar = 0;
        memmove(x_vec + 1, x_vec, (N-1)*sizeof(double));
        memmove(y_vec + 1, y_vec, (N-1)*sizeof(double));
        x_vec[0] = x;
        
        // moving average
        for(int n=0; n < N; n++){
            ma += b[n]*x_vec[n];
        }
        
        // auto regressive
        for(int n=1; n < N; n++){
            ar += (-1)*a[n]*y_vec[n];
        }
        
        y_vec[0] = ar + G*ma;
        return y_vec[0];
    }
} filterIIR;

double b_hann[20] = {0, 0.0013, 0.0063, 0.0164, 0.0318, 0.0514, 0.0729, 0.0932, 0.1090, 0.1176, 0.1176, 0.1090, 0.0932,
                     0.0729, 0.0514, 0.0318, 0.0164, 0.0063, 0.0013, 0};
double b_hamm[20] = {0.0005, 0.0022, 0.0065, 0.0153, 0.0298, 0.0492, 0.0716, 0.0934, 0.1109, 0.1206, 0.1206, 0.1109, 0.
