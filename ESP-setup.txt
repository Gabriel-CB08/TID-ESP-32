////////////////////////////////////////////
//                                        //
//       OPTICAL SENSOR DEFINES           //
//                                        //
////////////////////////////////////////////

//#define PIN_SS       D8
#define PIN_MISO     19
#define PIN_MOSI     23
#define PIN_SCK      18

#define PIN_MOUSECAM_RESET     14
#define PIN_MOUSECAM_CS        16 //D3

#define ADNS3080_PIXELS_X                30
#define ADNS3080_PIXELS_Y                30

#define ADNS3080_PRODUCT_ID            0x00
#define ADNS3080_REVISION_ID           0x01
#define ADNS3080_MOTION                0x02
#define ADNS3080_DELTA_X               0x03
#define ADNS3080_DELTA_Y               0x04
#define ADNS3080_SQUAL                 0x05
#define ADNS3080_PIXEL_SUM             0x06
#define ADNS3080_MAXIMUM_PIXEL         0x07
#define ADNS3080_CONFIGURATION_BITS    0x0a
#define ADNS3080_EXTENDED_CONFIG       0x0b
#define ADNS3080_DATA_OUT_LOWER        0x0c
#define ADNS3080_DATA_OUT_UPPER        0x0d
#define ADNS3080_SHUTTER_LOWER         0x0e
#define ADNS3080_SHUTTER_UPPER         0x0f
#define ADNS3080_FRAME_PERIOD_LOWER    0x10
#define ADNS3080_FRAME_PERIOD_UPPER    0x11
#define ADNS3080_MOTION_CLEAR          0x12
#define ADNS3080_FRAME_CAPTURE         0x13
#define ADNS3080_SROM_ENABLE           0x14
#define ADNS3080_FRAME_PERIOD_MAX_BOUND_LOWER      0x19
#define ADNS3080_FRAME_PERIOD_MAX_BOUND_UPPER      0x1a
#define ADNS3080_FRAME_PERIOD_MIN_BOUND_LOWER      0x1b
#define ADNS3080_FRAME_PERIOD_MIN_BOUND_UPPER      0x1c
#define ADNS3080_SHUTTER_MAX_BOUND_LOWER           0x1e
#define ADNS3080_SHUTTER_MAX_BOUND_UPPER           0x1e
#define ADNS3080_SROM_ID               0x1f
#define ADNS3080_OBSERVATION           0x3d
#define ADNS3080_INVERSE_PRODUCT_ID    0x3f
#define ADNS3080_PIXEL_BURST           0x40
#define ADNS3080_MOTION_BURST          0x50
#define ADNS3080_SROM_LOAD             0x60

#define ADNS3080_PRODUCT_ID_VAL        0x17

void setup() {
  pinMode(ONBOARD_LED, OUTPUT);
  digitalWrite(ONBOARD_LED, HIGH); // led to indicate setup start
  
  Serial.begin(115200);
  Serial.println("");
  
  /////////////////////////////////////
  ///       Motor Start          //////
  /////////////////////////////////////
  pinMode(Control_fwd, OUTPUT);   // 1A - Definition as output pin
  pinMode(Control_back, OUTPUT);  // 2A - Definition as output pin
  pinMode(Control_v, OUTPUT);     // 1,2 EN - Definition as output pin
  digitalWrite(Control_v, HIGH);  // Motor off - O Volts (HIGH = 0)
  ledcSetup(Control_v, 100, 10); // Freq at 100 Hz ESP32 resolution of 10 bits
  ledcAttachPin(12, Control_v);

  /////////////////////////////////////
  ///      Communication Start      ///
  /////////////////////////////////////

  WiFi.mode(WIFI_STA);
  Serial.println(WiFi.macAddress());
  // esp_wifi_set_mac(ESP_IF_WIFI_STA, mac_leader);
  // Only use the lines below to activate 'custom wifi settings'
  // WiFi.disconnect();
  // setup_custom_wifi(&my_config);
  esp_wifi_set_ps(WIFI_PS_NONE); // No power-saving mode
    
  setup_espnow();
  // add_peer(mac_addr_A, CHANNEL, false);     // (const char* mac, int channel, bool encryption)
  add_peer(mac_addr_broadcast, CHANNEL, false);
    
  /* MQTT */
  setup_wifi();
  client.setServer(mqtt_server, 1883);
  client.setCallback(callback);

  if (!client.connected()) {
    reconnect();
    Serial.println("Subscribed to the topics ");
  }
  client.loop();

  udp.begin(WiFi.localIP(), udp_port);

  uint8_t ch; wifi_second_chan_t ch2;
  esp_wifi_get_channel(&ch, &ch2);
  float freq = 2.407 + 0.005 * (int)ch;
  Serial.printf("Connected to Wi-Fi channel: %d (%.3f GHz)\n", ch, freq);

  /* ESP-NOW */
  // add_peer(mac_addr_A, CHANNEL, false);     // (const char* mac, int channel, bool encryption)
  setup_espnow();
  add_peer(mac_addr_broadcast, CHANNEL, false);
    
  ///////////////////////////////////////////
  //         Sensors Initialization       ///
  ///////////////////////////////////////////
  Wire.begin();
  SensorToF.init();
  SensorToF.setTimeout(500);
  SensorToF.setMeasurementTimingBudget(20000);
  SensorToF.startContinuous();
  
  pinMode(PIN_MISO, INPUT);
  pinMode(PIN_MOSI, OUTPUT);
  pinMode(PIN_SCK, OUTPUT);
  SPI.begin();
  SPI.setClockDivider(SPI_CLOCK_DIV8);
  SPI.setDataMode(SPI_MODE3);
  SPI.setBitOrder(MSBFIRST);
  Serial.println("Initializing Camera");
  if (mousecam_init() == -1) {
    Serial.println("Failed to Initialize the Camera");
    while (1);
  }
  Serial.println("Camera Initialized Successfully");
  MD cam_med;

  ///////////////////////////////////////////
  ////    Motor Dead-Zone Routine        /////
  ///////////////////////////////////////////
  Serial.println("Starting Deadband Routine");
  while (dead) {
    mousecam_read_motion(&cam_med);
    if (cam_med.squal > 16) {
      MotorSpeed += 4;
      SetMotorControl();
      delay(50);
    
      Serial.print((int8_t)cam_med.dy);                
      Serial.print(" ");
      Serial.println(MotorSpeed);
      if ((int8_t)cam_med.dy > 0) {
        deadband = MotorSpeed;
        dead = 0;
        Serial.println("DeadBand OK!!");
        MotorSpeed = 0;   
        SetMotorControl();
        delay(1000);
      }
    }
  }
  // calibracion();
  /*---------------------------------------------------------------*/
  /* int N = 20; // number of measurements to calculate average
  int deltaT = 9; // ms
  // Measure distance to the object at rest
  double x_0 = 0;
  uint16_t range = SensorToF.readReg16Bit(SensorToF.RESULT_RANGE_STATUS + 10);
  delay(200);

  // Measure initial distance 
  averageDistance(&x_0, N);
  Serial.printf("Initial Distance = %.2f [cm]\n", x_0);

  int count_cam = 0;                      // variable to store the 'counts' from the sensor (yy1)
  MD camara;                              // structure for mouse_cam measurements

  MotorDirection = 0; // reverse
  MotorSpeed = 200;
  SetMotorControl();

  uint32_t time0 = millis();
  uint32_t t_last = millis();

  while (millis() - time0 < 1400) { // total travel time is 1.4 seconds
    if (millis() - t_last >= deltaT) {
      do {
        mousecam_read_motion(&camara);
        count_cam += (int8_t)camara.dy;
        if (camara.motion & 0x10) // 1 = Overflow has occurred
          Serial.println("Overflow");
      } while (camara.motion & 0x80); // 1 = Motion occurred, data ready for reading in Delta_X and Delta_Y registers
    }
  }

  MotorSpeed = 0;
  SetMotorControl();

  delay(500); // ensure it stopped

  do {
    mousecam_read_motion(&camara);
    count_cam += (int8_t)camara.dy;
    if (camara.motion & 0x10)
      Serial.println("Overflow");
  } while (camara.motion & 0x80);

  double x_ff = 0;
  averageDistance(&x_ff, N);
  Serial.printf("Final Distance = %.2f [cm]\n\n", x_ff);
  Serial.printf("Traveled Distance = %.2f [cm]\n", -(x_ff - x_0));
  Serial.printf("Camera Counts = %d\n", count_cam);

  scale = -(x_ff - x_0) / count_cam;
  Serial.printf("Scale = %.5f [cm/counts]\n", scale);
  delay(1000);
  Serial.println("------- Test Completed ----------");
  //---------------------------------------------------
  Serial.println("------- Scale Verification ---------");
  // Measure distance to the object at rest
  x_0 = 0;
  range = SensorToF.readReg16Bit(SensorToF.RESULT_RANGE_STATUS + 10);
  delay(200);

  // Measure initial distance 
  averageDistance(&x_0, N);
  Serial.printf("Initial Distance = %.2f [cm]\n", x_0);
  count_cam = 0; // reset counts

  MotorDirection = 0; // reverse
  MotorSpeed = 150;
  SetMotorControl();

  time0 = millis();
  t_last = millis();
  while (millis() - time0 < 2000) {
    if (millis() - t_last >= deltaT) {
      do {
        mousecam_read_motion(&camara);
        count_cam += (int8_t)camara.dy;
        if (camara.motion & 0x10)
          Serial.println("Overflow");
      } while (camara.motion & 0x80);
    }
  }

  MotorSpeed = 0;
  SetMotorControl();

  delay(500);

  do {
    mousecam_read_motion(&camara);
    count_cam += (int8_t)camara.dy;
    if (camara.motion & 0x10)
      Serial.println("Overflow");
  } while (camara.motion & 0x80);

  x_ff = 0;
  averageDistance(&x_ff, N);
  Serial.printf("Final Distance = %.2f [cm]\n\n", x_ff);
  Serial.printf("Traveled Distance = %.2f [cm]\n", -(x_ff - x_0));
  Serial.printf("Camera Counts = %d\n", count_cam);
  Serial.printf("Distance = %.2f [cm]\n", scale * count_cam);
  //--------------------------------------------------- */

  Serial.println("------- Initialization Finished ---------");
}

void loop() {
  if (!client.connected()) {
    reconnect();
    Serial.println("MQTT reconnected");
  }
  client.loop();

  /* Get time in ms */
  uint32_t time = millis();
  if (time - t0 >= deltaT) {
    t0 = time;
    x_hat(0) = x_hat(0) + deltaT / 1000.0 * x_hat(1);
    P = P + Q;

    // Serial.printf("Estimated Position = %.2f\n", x_hat(0));
    // Serial.printf("Estimated Speed = %.2f\n", x_hat(1));

    readIMU(&imu_data);
    SensorToF.readSingle();

    float acc_norm = sqrt(imu_data.ax * imu_data.ax + imu_data.ay * imu_data.ay + imu_data.az * imu_data.az);
    // Serial.printf("Acc_Norm = %.2f [g]\n", acc_norm);

    float range = SensorToF.readSingleMillimeters() / 10.0;

    float r = range - range_min;
    if (r < 0) r = 0;
    // Serial.printf("Range = %.2f [cm]\n", r);

    mousecam_read_motion(&cam);
    int32_t dx = cam.dx, dy = cam.dy;

    if (cam.motion & 0x80) {  // Motion occurred, data ready for reading
      if (cam.squal > 16) {
        MotorDirection = cam.dx > 0 ? 1 : 0;   // Forward if dx > 0, else backward
        MotorSpeed = abs(cam.dx);             // Speed in absolute value
        SetMotorControl();

        // correct for scale factor
        dy = scale * dy;
        cam_pos += dy;
      } else {  // Mousecam SQUAL too low, no reliable data
        MotorSpeed = 0;
        SetMotorControl();
      }
    }

    // Serial.printf("Mousecam X = %d\n", dx);
    // Serial.printf("Mousecam Y = %d\n", dy);

    /* Kalman Gain */
    K(0) = P(0, 0) / (P(0, 0) + R);
    K(1) = P(1, 0) / (P(0, 0) + R);

    /* Update estimation with Kalman Gain */
    x_hat(0) = x_hat(0) + K(0) * (cam_pos - x_hat(0));
    x_hat(1) = x_hat(1) + K(1) * (cam_pos - x_hat(0));

    /* Update error covariance */
    P(0, 0) = (1 - K(0)) * P(0, 0);
    P(1, 0) = (1 - K(1)) * P(1, 0);

    // Serial.printf("Estimated Position = %.2f\n", x_hat(0));
    // Serial.printf("Estimated Speed = %.2f\n", x_hat(1));

    sendData(cam_pos, x_hat, imu_data);
    cam_pos = 0;
  }
}

void SetMotorControl() {
  if (MotorDirection) {
    digitalWrite(Control_fwd, HIGH);
    digitalWrite(Control_back, LOW);
  } else {
    digitalWrite(Control_fwd, LOW);
    digitalWrite(Control_back, HIGH);
  }
  ledcWrite(Control_v, MotorSpeed);
}
