#include "freertos/FreeRTOS.h"
#include "freertos/task.h"
#include "driver/gpio.h"
#include "driver/uart.h"
#include "driver/spi_master.h"
#include "esp_log.h"
#include "nvs_flash.h"

#define UART_NUM UART_NUM_1
#define BUF_SIZE (1024)
#define BAUD_RATE 115200

#define ADNS3080_PIXELS_X 30
#define ADNS3080_PIXELS_Y 30

#define AP_SPI_DATAIN          GPIO_NUM_19  // MISO
#define AP_SPI_DATAOUT         GPIO_NUM_23  // MOSI
#define AP_SPI_CLOCK           GPIO_NUM_18  // SCK
#define ADNS3080_CHIP_SELECT   GPIO_NUM_16  // SS
#define ADNS3080_RESET         GPIO_NUM_14  // RESET

#define ADNS3080_PRODUCT_ID    0x00
#define ADNS3080_FRAME_CAPTURE 0x13
#define ADNS3080_SQUAL         0x05
#define ADNS3080_MOTION        0x02
#define ADNS3080_DELTA_X       0x03
#define ADNS3080_DELTA_Y       0x04

static const char *TAG = "ADNS3080";
spi_device_handle_t spi;

int _cs_pin = ADNS3080_CHIP_SELECT;
int _reset_pin = ADNS3080_RESET;
unsigned int last_update;
bool _overflow = false;
bool _motion = false;
int raw_dx;
int raw_dy;
unsigned int surface_quality;

void init_uart() {
    const uart_config_t uart_config = {
        .baud_rate = BAUD_RATE,
        .data_bits = UART_DATA_8_BITS,
        .parity = UART_PARITY_DISABLE,
        .stop_bits = UART_STOP_BITS_1,
        .flow_ctrl = UART_HW_FLOWCTRL_DISABLE
    };
    uart_param_config(UART_NUM, &uart_config);
    uart_set_pin(UART_NUM, GPIO_NUM_23, GPIO_NUM_19, UART_PIN_NO_CHANGE, UART_PIN_NO_CHANGE);
    uart_driver_install(UART_NUM, BUF_SIZE * 2, 0, 0, NULL, 0);
}

void send_to_uart(const char* data) {
    uart_write_bytes(UART_NUM, data, strlen(data));
}

void init_spi() {
    spi_bus_config_t buscfg = {
        .miso_io_num = AP_SPI_DATAIN,
        .mosi_io_num = AP_SPI_DATAOUT,
        .sclk_io_num = AP_SPI_CLOCK,
        .quadwp_io_num = -1,
        .quadhd_io_num = -1,
    };

    spi_device_interface_config_t devcfg = {
        .clock_speed_hz = 2 * 1000 * 1000,  // Clock out at 2 MHz
        .mode = 3,                          // SPI mode 3
        .spics_io_num = ADNS3080_CHIP_SELECT,   // CS pin
        .queue_size = 7,                    // We want to be able to queue 7 transactions at a time
    };

    ESP_ERROR_CHECK(spi_bus_initialize(HSPI_HOST, &buscfg, 1));
    ESP_ERROR_CHECK(spi_bus_add_device(HSPI_HOST, &devcfg, &spi));
}

void reset() {
    gpio_set_level(_reset_pin, 1);
    ets_delay_us(10);
    gpio_set_level(_reset_pin, 0);
}

uint8_t read_register(uint8_t reg) {
    uint8_t result;
    spi_transaction_t t;
    memset(&t, 0, sizeof(t));
    t.length = 8;
    t.tx_buffer = &reg;
    t.rx_buffer = &result;
    t.flags = SPI_TRANS_USE_RXDATA;
    gpio_set_level(_cs_pin, 0);
    spi_device_transmit(spi, &t);
    gpio_set_level(_cs_pin, 1);
    ets_delay_us(50);
    return result;
}

void write_register(uint8_t reg, uint8_t value) {
    uint8_t data[2] = {reg | 0x80, value};
    spi_transaction_t t;
    memset(&t, 0, sizeof(t));
    t.length = 16;
    t.tx_buffer = data;
    gpio_set_level(_cs_pin, 0);
    spi_device_transmit(spi, &t);
    gpio_set_level(_cs_pin, 1);
    ets_delay_us(50);
}

bool initOF() {
    int retry = 0;

    gpio_set_direction(AP_SPI_DATAOUT, GPIO_MODE_OUTPUT);
    gpio_set_direction(AP_SPI_DATAIN, GPIO_MODE_INPUT);
    gpio_set_direction(AP_SPI_CLOCK, GPIO_MODE_OUTPUT);
    gpio_set_direction(_cs_pin, GPIO_MODE_OUTPUT);
    gpio_set_direction(_reset_pin, GPIO_MODE_OUTPUT);

    gpio_set_level(_cs_pin, 1);
    reset();

    init_spi();

    while (retry < 3) {
        if (read_register(ADNS3080_PRODUCT_ID) == 0x17)
            return true;
        retry++;
    }

    return false;
}

void print_pixel_data() {
    int i, j;
    bool isFirstPixel = true;
    uint8_t regValue;
    uint8_t pixelValue;

    write_register(ADNS3080_FRAME_CAPTURE, 0x83);
    ets_delay_us(1510);

    for (i = 0; i < ADNS3080_PIXELS_Y; i++) {
        for (j = 0; j < ADNS3080_PIXELS_X; j++) {
            regValue = read_register(ADNS3080_FRAME_CAPTURE);
            if (isFirstPixel && (regValue & 0x40) == 0) {
                ESP_LOGI(TAG, "failed to find first pixel");
            }
            isFirstPixel = false;
            pixelValue = (regValue << 2);
            printf("%d,", pixelValue);
            ets_delay_us(50);
        }
        printf("\n");
    }

    reset();
}

void display_image() {
    ESP_LOGI(TAG, "image data --------------");
    print_pixel_data();
    ESP_LOGI(TAG, "-------------------------");
}

void display_image_continuously() {
    ESP_LOGI(TAG, "press any key to return to menu");
    while (true) {
        display_image();
        vTaskDelay(2000 / portTICK_PERIOD_MS);
    }
}

void display_motion() {
    ESP_LOGI(TAG, "press x to return to menu..");
    while (true) {
        updateOF();
        if (_overflow) {
            ESP_LOGI(TAG, "overflow!!");
        }
        ESP_LOGI(TAG, "dx: %d\tdy: %d\tsqual: %u", raw_dx, raw_dy, surface_quality);
        vTaskDelay(100 / portTICK_PERIOD_MS);
    }
}

bool updateOF() {
    uint8_t motion_reg;
    surface_quality = read_register(ADNS3080_SQUAL);
    ets_delay_us(50);

    motion_reg = read_register(ADNS3080_MOTION);
    _overflow = ((motion_reg & 0x10) != 0);
    if (motion_reg & 0x80) {
        raw_dx = (int8_t)read_register(ADNS3080_DELTA_X);
        ets_delay_us(50);
        raw_dy = (int8_t)read_register(ADNS3080_DELTA_Y);
        _motion = true;
    } else {
        raw_dx = 0;
        raw_dy = 0;
    }
    last_update = esp_log_timestamp();

    return true;
}

void task_read_uart(void* arg) {
    uint8_t data[BUF_SIZE];
    while (1) {
        int len = uart_read_bytes(UART_NUM, data, BUF_SIZE, 20 / portTICK_RATE_MS);
        if (len > 0) {
            data[len] = 0; // Null-terminate the string
            printf("Received: %s\n", data);
            // Aquí puedes implementar la lógica para llamar a las funciones correspondientes
            if (strstr((char*)data, "i") != NULL) {
                display_image();
            } else if (strstr((char*)data, "I") != NULL) {
                display_image_continuously();
            } else if (strstr((char*)data, "m") != NULL) {
                display_motion();
            }
        }
    }
}

void display_menu() {
    ESP_LOGI(TAG, "please choose from the following options:");
    ESP_LOGI(TAG, "     i - display image");
    ESP_LOGI(TAG, "     I - display image continuously");
    ESP_LOGI(TAG, "     m - display motion");
}

void app_main() {
    ESP_ERROR_CHECK(nvs_flash_init());
    ESP_LOGI(TAG, "www.bot-thoughts.com\nOptical Flow test program V1.0");
    ESP_LOGI(TAG, "Based on APM/ArduCopter AP_OpticalFlow library by Randy Mackay");
    vTaskDelay(1000 / portTICK_PERIOD_MS);

    init_uart();

    if (!initOF()) {
        ESP_LOGE(TAG, "Failed to initialise ADNS3080");
    }

    vTaskDelay(1000 / portTICK_PERIOD_MS);

    // Crear tarea para leer datos del UART
    xTaskCreate(task_read_uart, "task_read_uart", 2048, NULL, 10, NULL);

    while (true) {
        display_menu();
        vTaskDelay(10000 / portTICK_PERIOD_MS);  // Placeholder for user input delay
    }
}
