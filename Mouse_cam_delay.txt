#include <Arduino.h>
#include <SPI.h>

// Definición de pines
#define PIN_MOUSECAM_RESET  5    // Pin de reset
#define PIN_MOUSECAM_CS     15   // Pin de chip select (CS)
#define PIN_SPI_MOSI        23   // Pin MOSI
#define PIN_SPI_MISO        19   // Pin MISO
#define PIN_SPI_SCK         18   // Pin SCK

// Definición de registros y valores específicos del ADNS3080
#define ADNS3080_PRODUCT_ID             0x00
#define ADNS3080_PRODUCT_ID_VAL         0x17

#define ADNS3080_CONFIGURATION_BITS     0x0a
#define ADNS3080_MOTION_BURST           0x50
#define ADNS3080_PIXEL_BURST            0x40
#define ADNS3080_FRAME_CAPTURE          0x6e

// Estructura para almacenar datos de movimiento
struct MD {
  uint8_t motion;
  uint8_t dx;
  uint8_t dy;
  uint8_t squal;
  uint16_t shutter;
  uint8_t max_pix;
};

// Función para resetear el sensor ADNS3080
void mousecam_reset() {
  digitalWrite(PIN_MOUSECAM_RESET, HIGH);
  delayMicroseconds(10); // Pulso de reset >10us
  digitalWrite(PIN_MOUSECAM_RESET, LOW);
  delayMicroseconds(500); // 35ms desde reset hasta funcional
}

// Función para inicializar el sensor ADNS3080
int mousecam_init() {
  pinMode(PIN_MOUSECAM_RESET, OUTPUT);
  pinMode(PIN_MOUSECAM_CS, OUTPUT);

  digitalWrite(PIN_MOUSECAM_CS, HIGH);

  mousecam_reset();

  int pid = mousecam_read_reg(ADNS3080_PRODUCT_ID);
  if (pid != ADNS3080_PRODUCT_ID_VAL)
    return -1;

  // Activar modo sensible
  mousecam_write_reg(ADNS3080_CONFIGURATION_BITS, 0x19);

  return 0;
}

// Función para escribir un registro del sensor ADNS3080
void mousecam_write_reg(int reg, int val) {
  digitalWrite(PIN_MOUSECAM_CS, LOW);
  SPI.transfer(reg | 0x80);
  SPI.transfer(val);
  digitalWrite(PIN_MOUSECAM_CS, HIGH);
  delayMicroseconds(50);
}

// Función para leer un registro del sensor ADNS3080
int mousecam_read_reg(int reg) {
  digitalWrite(PIN_MOUSECAM_CS, LOW);
  SPI.transfer(reg);
  delayMicroseconds(75);
  int ret = SPI.transfer(0xff);
  digitalWrite(PIN_MOUSECAM_CS, HIGH);
  delayMicroseconds(1);
  return ret;
}

// Función para leer datos de movimiento del sensor ADNS3080
void mousecam_read_motion(struct MD *p) {
  digitalWrite(PIN_MOUSECAM_CS, LOW);
  SPI.transfer(ADNS3080_MOTION_BURST);
  delayMicroseconds(75);
  uint8_t burst = SPI.transfer(0x00);
  if (burst & 0x10) {
    Serial.println("Overflow");
  }
  p->motion = SPI.transfer(0x00);
  p->dx = SPI.transfer(0x00);
  p->dy = SPI.transfer(0x00);
  p->squal = SPI.transfer(0x00);
  p->shutter = SPI.transfer(0x00) << 8;
  p->shutter |= SPI.transfer(0x00);
  p->max_pix = SPI.transfer(0x00);
  digitalWrite(PIN_MOUSECAM_CS, HIGH);
  delayMicroseconds(5);
}

// Función para capturar un fotograma del sensor ADNS3080
int mousecam_frame_capture(uint8_t *pdata) {
  mousecam_write_reg(ADNS3080_FRAME_CAPTURE, 0x83);

  digitalWrite(PIN_MOUSECAM_CS, LOW);

  SPI.transfer(ADNS3080_PIXEL_BURST);
  delayMicroseconds(50);

  uint8_t pix;
  byte started = 0;
  int count;
  int timeout = 0;
  int ret = 0;
  for (count = 0; count < ADNS3080_PIXELS_X * ADNS3080_PIXELS_Y; ) {
    pix = SPI.transfer(0xff);
    delayMicroseconds(10);
    if (started == 0) {
      if (pix & 0x40)
        started = 1;
      else {
        timeout++;
        if (timeout == 100) {
          ret = -1;
          break;
        }
      }
    }
    if (started == 1) {
      pdata[count++] = pix << 2; // Escalar al rango normal de bytes en escala de grises
    }
  }

  digitalWrite(PIN_MOUSECAM_CS, HIGH);
  delayMicroseconds(14);

  return ret;
}

void setup() {
  Serial.begin(115200);
  delay(1000);

  SPI.begin(PIN_SPI_SCK, PIN_SPI_MISO, PIN_SPI_MOSI, PIN_MOUSECAM_CS);  // Inicialización del bus SPI
  SPI.setFrequency(1000000);  // Ajusta la velocidad del bus SPI según sea necesario, por ejemplo 1 MHz
  pinMode(PIN_MOUSECAM_RESET, OUTPUT);
  pinMode(PIN_MOUSECAM_CS, OUTPUT);
  digitalWrite(PIN_MOUSECAM_CS, HIGH);  // Desactiva el chip select inicialmente

  if (mousecam_init() == 0) {
    Serial.println("ADNS3080 inicializado correctamente.");
  } else {
    Serial.println("Error al inicializar ADNS3080.");
  }
}

void loop() {
  // Aquí puedes llamar a las funciones para interactuar con el sensor ADNS3080
  // Por ejemplo:
  struct MD motion_data;
  mousecam_read_motion(&motion_data);

  Serial.print("Motion: ");
  Serial.println(motion_data.motion);
  Serial.print("dX: ");
  Serial.println(motion_data.dx);
  Serial.print("dY: ");
  Serial.println(motion_data.dy);
  Serial.print("SQUAL: ");
  Serial.println(motion_data.squal);
  Serial.print("Shutter: ");
  Serial.println(motion_data.shutter);
  Serial.print("Max Pixel: ");
  Serial.println(motion_data.max_pix);

  delay(1000);  // Espera 1 segundo antes de la próxima lectura
}
